/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './AwGrid';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '../services/SelectService';
import * as import7 from '../services/GridReactiveServices';
import * as import8 from '../services/SortingService';
import * as import9 from '@angular/core/src/linker/view_type';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from '../services/GridDataService';
import * as import12 from './templates/awgrid.css';
import * as import13 from '@angular/core/src/linker/query_list';
import * as import14 from '@angular/core/src/linker/view_container';
import * as import15 from '../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import16 from '../directives/liveScroll.ngfactory';
import * as import17 from '@angular/common/src/pipes/async_pipe';
import * as import18 from '@angular/core/src/linker/template_ref';
import * as import19 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import20 from '@angular/core/src/linker/element_ref';
import * as import21 from '@angular/common/src/directives/ng_for';
import * as import22 from '../directives/liveScroll';
import * as import23 from '@angular/core/src/security';
import * as import24 from './HeaderColumn';
import * as import25 from './HeaderColumn.ngfactory';
import * as import26 from './Page';
import * as import27 from './Page.ngfactory';
export class Wrapper_AwGrid {
  /*private*/ _eventHandler:Function;
  context:import0.AwGrid;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  subscription0:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import0.AwGrid(p0,p1);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_idField(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.idField = currValue;
      this._expr_0 = currValue;
    }
  }
  check_columnsDef(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.columnsDef = currValue;
      this._expr_1 = currValue;
    }
  }
  check_pageSize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.pageSize = currValue;
      this._expr_2 = currValue;
    }
  }
  check_height(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.height = currValue;
      this._expr_3 = currValue;
    }
  }
  check_selectionMode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.selectionMode = currValue;
      this._expr_4 = currValue;
    }
  }
  check_selected(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.selected = currValue;
      this._expr_5 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onSelect.subscribe(_eventHandler.bind(view,'onSelect'))); }
  }
}
var renderType_AwGrid_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_AwGrid_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.AwGrid>;
  _SelectService_0_3:import6.SelectService;
  _ReactiveGridService_0_4:import7.ReactiveGridService;
  _AwGrid_0_5:Wrapper_AwGrid;
  __SortingService_0_6:import8.SortingService;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AwGrid_Host0,renderType_AwGrid_Host,import9.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways);
  }
  get _SortingService_0_6():import8.SortingService {
    if ((this.__SortingService_0_6 == null)) { (this.__SortingService_0_6 = new import8.SortingService()); }
    return this.__SortingService_0_6;
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'aw-grid',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_AwGrid0(this.viewUtils,this,0,this._el_0);
    this._SelectService_0_3 = new import6.SelectService();
    this._ReactiveGridService_0_4 = new import7.ReactiveGridService(this.injectorGet(import11.GridDataServiceBase,this.parentIndex),this._SelectService_0_3);
    this._AwGrid_0_5 = new Wrapper_AwGrid(this._ReactiveGridService_0_4,this._SelectService_0_3);
    this.compView_0.create(this._AwGrid_0_5.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import10.ComponentRef_<any>(0,this,this._el_0,this._AwGrid_0_5.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import6.SelectService) && (0 === requestNodeIndex))) { return this._SelectService_0_3; }
    if (((token === import7.ReactiveGridService) && (0 === requestNodeIndex))) { return this._ReactiveGridService_0_4; }
    if (((token === import0.AwGrid) && (0 === requestNodeIndex))) { return this._AwGrid_0_5.context; }
    if (((token === import8.SortingService) && (0 === requestNodeIndex))) { return this._SortingService_0_6; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._AwGrid_0_5.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.detectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._AwGrid_0_5.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._AwGrid_0_5.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const AwGridNgFactory:import10.ComponentFactory<import0.AwGrid> = new import10.ComponentFactory<import0.AwGrid>('aw-grid',View_AwGrid_Host0,import0.AwGrid);
const styles_AwGrid:any[] = [import12.styles];
var renderType_AwGrid:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_AwGrid,{});
export class View_AwGrid0 extends import2.AppView<import0.AwGrid> {
  _viewQuery_LiveScroll_0:import13.QueryList<any>;
  _viewQuery_Page_1:import13.QueryList<any>;
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _text_3:any;
  _el_4:any;
  _text_5:any;
  _anchor_6:any;
  /*private*/ _vc_6:import14.ViewContainer;
  _TemplateRef_6_5:any;
  _NgFor_6_6:import15.Wrapper_NgFor;
  _text_7:any;
  _text_8:any;
  _text_9:any;
  _el_10:any;
  _LiveScroll_10_3:import16.Wrapper_LiveScroll;
  _text_11:any;
  _anchor_12:any;
  /*private*/ _vc_12:import14.ViewContainer;
  _TemplateRef_12_5:any;
  _NgFor_12_6:import15.Wrapper_NgFor;
  _text_13:any;
  _text_14:any;
  /*private*/ _expr_24:any;
  /*private*/ _expr_25:any;
  _pipe_async_0:import17.AsyncPipe;
  _pipe_async_1:import17.AsyncPipe;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AwGrid0,renderType_AwGrid,import9.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckOnce);
    this._expr_24 = import1.UNINITIALIZED;
    this._expr_25 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_LiveScroll_0 = new import13.QueryList<any>();
    this._viewQuery_Page_1 = new import13.QueryList<any>();
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','awgrid'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n	',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'div',new import3.InlineArray2(2,'class','thead'),(null as any));
    this._text_3 = this.renderer.createText(this._el_2,'\n		',(null as any));
    this._el_4 = import3.createRenderElement(this.renderer,this._el_2,'div',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_5 = this.renderer.createText(this._el_4,'\n			',(null as any));
    this._anchor_6 = this.renderer.createTemplateAnchor(this._el_4,(null as any));
    this._vc_6 = new import14.ViewContainer(6,4,this,this._anchor_6);
    this._TemplateRef_6_5 = new import18.TemplateRef_(this,6,this._anchor_6);
    this._NgFor_6_6 = new import15.Wrapper_NgFor(this._vc_6.vcRef,this._TemplateRef_6_5,this.parentView.injectorGet(import19.IterableDiffers,this.parentIndex),this.ref);
    this._text_7 = this.renderer.createText(this._el_4,'\n		',(null as any));
    this._text_8 = this.renderer.createText(this._el_2,'\n	',(null as any));
    this._text_9 = this.renderer.createText(this._el_0,'\n	',(null as any));
    this._el_10 = import3.createRenderElement(this.renderer,this._el_0,'div',new import3.InlineArray4(4,'class','tbody','live-scroll',''),(null as any));
    this._LiveScroll_10_3 = new import16.Wrapper_LiveScroll(new import20.ElementRef(this._el_10));
    this._text_11 = this.renderer.createText(this._el_10,'\n		',(null as any));
    this._anchor_12 = this.renderer.createTemplateAnchor(this._el_10,(null as any));
    this._vc_12 = new import14.ViewContainer(12,10,this,this._anchor_12);
    this._TemplateRef_12_5 = new import18.TemplateRef_(this,12,this._anchor_12);
    this._NgFor_12_6 = new import15.Wrapper_NgFor(this._vc_12.vcRef,this._TemplateRef_12_5,this.parentView.injectorGet(import19.IterableDiffers,this.parentIndex),this.ref);
    this._text_13 = this.renderer.createText(this._el_10,'\n	',(null as any));
    this._text_14 = this.renderer.createText(this._el_0,'\n',(null as any));
    this._pipe_async_0 = new import17.AsyncPipe(this.ref);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_10,new import3.InlineArray4(4,'onLiveScroll',(null as any),'scroll',(null as any)),this.eventHandler(this.handleEvent_10));
    this._LiveScroll_10_3.subscribe(this,this.eventHandler(this.handleEvent_10),true,false);
    this._pipe_async_1 = new import17.AsyncPipe(this.ref);
    this._viewQuery_LiveScroll_0.reset([this._LiveScroll_10_3.context]);
    this.context.liveScroll = this._viewQuery_LiveScroll_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._anchor_6,
      this._text_7,
      this._text_8,
      this._text_9,
      this._el_10,
      this._text_11,
      this._anchor_12,
      this._text_13,
      this._text_14
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.TemplateRef) && (6 === requestNodeIndex))) { return this._TemplateRef_6_5; }
    if (((token === import21.NgFor) && (6 === requestNodeIndex))) { return this._NgFor_6_6.context; }
    if (((token === import18.TemplateRef) && (12 === requestNodeIndex))) { return this._TemplateRef_12_5; }
    if (((token === import21.NgFor) && (12 === requestNodeIndex))) { return this._NgFor_12_6.context; }
    if (((token === import22.LiveScroll) && ((10 <= requestNodeIndex) && (requestNodeIndex <= 13)))) { return this._LiveScroll_10_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const valUnwrapper:any = new import1.ValueUnwrapper();
    const currVal_6_0_0:any = this.context.columnsDef;
    this._NgFor_6_6.check_ngForOf(currVal_6_0_0,throwOnChange,false);
    this._NgFor_6_6.ngDoCheck(this,this._anchor_6,throwOnChange);
    const currVal_10_0_0:any = this.context.pages;
    this._LiveScroll_10_3.check_pages(currVal_10_0_0,throwOnChange,false);
    this._LiveScroll_10_3.ngDoCheck(this,this._el_10,throwOnChange);
    valUnwrapper.reset();
    const currVal_12_0_0:any = valUnwrapper.unwrap(this._pipe_async_1.transform(this.context.dataService.pages));
    this._NgFor_12_6.check_ngForOf(currVal_12_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    this._NgFor_12_6.ngDoCheck(this,this._anchor_12,throwOnChange);
    this._vc_6.detectChangesInNestedViews(throwOnChange);
    this._vc_12.detectChangesInNestedViews(throwOnChange);
    const currVal_24:any = this.context.height;
    if (import3.checkBinding(throwOnChange,this._expr_24,currVal_24)) {
      this.renderer.setElementStyle(this._el_0,'height',((this.viewUtils.sanitizer.sanitize(import23.SecurityContext.STYLE,currVal_24) == null)? (null as any): this.viewUtils.sanitizer.sanitize(import23.SecurityContext.STYLE,currVal_24).toString()));
      this._expr_24 = currVal_24;
    }
    valUnwrapper.reset();
    const currVal_25:any = valUnwrapper.unwrap(this._pipe_async_0.transform(this.context.liveScroll.scrollLeft));
    if ((valUnwrapper.hasWrappedValue || import3.checkBinding(throwOnChange,this._expr_25,currVal_25))) {
      this.renderer.setElementProperty(this._el_2,'scrollLeft',currVal_25);
      this._expr_25 = currVal_25;
    }
    if (!throwOnChange) { if (this._viewQuery_Page_1.dirty) {
        this._viewQuery_Page_1.reset([this._vc_12.mapNestedViews(View_AwGrid2,(nestedView:View_AwGrid2):any => {
          return [nestedView._Page_0_3.context];
      })]);
      this.context._pages = this._viewQuery_Page_1;
      this._viewQuery_Page_1.notifyOnChanges();
    } }
  }
  destroyInternal():void {
    this._vc_6.destroyNestedViews();
    this._vc_12.destroyNestedViews();
    this._LiveScroll_10_3.ngOnDestroy();
    this._pipe_async_0.ngOnDestroy();
    this._pipe_async_1.ngOnDestroy();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 6)) { return new View_AwGrid1(this.viewUtils,this,6,this._anchor_6,this._vc_6); }
    if ((nodeIndex == 12)) { return new View_AwGrid2(this.viewUtils,this,12,this._anchor_12,this._vc_12); }
    return (null as any);
  }
  handleEvent_10(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._LiveScroll_10_3.handleEvent(eventName,$event) && result);
    if ((eventName == 'onLiveScroll')) {
      const pd_sub_0:any = ((<any>this.context.onLiveScroll($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}
class View_AwGrid1 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import24.HeaderColumn>;
  _HeaderColumn_0_3:import25.Wrapper_HeaderColumn;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import14.ViewContainer) {
    super(View_AwGrid1,renderType_AwGrid,import9.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',new import3.InlineArray4(4,'aw-grid-head-col','','class','th'),(null as any));
    this.compView_0 = new import25.View_HeaderColumn0(this.viewUtils,this,0,this._el_0);
    this._HeaderColumn_0_3 = new import25.Wrapper_HeaderColumn(this.parentView.parentView.injectorGet(import7.ReactiveGridService,this.parentView.parentIndex),this.parentView.parentView.injectorGet(import8.SortingService,this.parentView.parentIndex));
    this.compView_0.create(this._HeaderColumn_0_3.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import24.HeaderColumn) && (0 === requestNodeIndex))) { return this._HeaderColumn_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.context.$implicit;
    this._HeaderColumn_0_3.check_model(currVal_0_0_0,throwOnChange,false);
    this._HeaderColumn_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._HeaderColumn_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._HeaderColumn_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
class View_AwGrid2 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import26.Page>;
  _Page_0_3:import27.Wrapper_Page;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import14.ViewContainer) {
    super(View_AwGrid2,renderType_AwGrid,import9.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',new import3.InlineArray4(4,'aw-grid-page','','class','tpage'),(null as any));
    this.compView_0 = new import27.View_Page0(this.viewUtils,this,0,this._el_0);
    this._Page_0_3 = new import27.Wrapper_Page(new import20.ElementRef(this._el_0),this.parentView.parentView.injectorGet(import6.SelectService,this.parentView.parentIndex));
    this.compView_0.create(this._Page_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import26.Page) && (0 === requestNodeIndex))) { return this._Page_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.context.$implicit;
    this._Page_0_3.check_pageService(currVal_0_0_0,throwOnChange,false);
    this._Page_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  dirtyParentQueriesInternal():void {
    (<View_AwGrid0>this.parentView)._viewQuery_Page_1.setDirty();
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}